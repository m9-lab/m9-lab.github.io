(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{283:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"php"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php"}},[t._v("#")]),t._v(" PHP")]),t._v(" "),a("p",[t._v("PHP是一种跨平台"),a("a",{attrs:{href:"https://github.com/php/php-src",target:"_blank",rel:"noopener noreferrer"}},[t._v("开源"),a("OutboundLink")],1),t._v("语言，尤其适合Web开发，快速、灵活和实用是PHP最重要的特点。PHP自1995年由Lerdorf创建以来，在全球得到了非常广泛的应用。")]),t._v(" "),a("p",[t._v("在2000年5月22日，以Zend Engine 1.0为基础的PHP 4正式发布，2004年7月13日则发布了PHP 5，PHP 5则使用了第二代的Zend Engine。PHP包含了许多新特色:完全实现面向对象、引入PDO、以及许多性能方面的改进。目前PHP5.X仍然是应用非常广泛的一个版本。")]),t._v(" "),a("p",[t._v("默认读者已具备简单C语言功底，PHP功底，本篇用于记录学习及从编程语言本身实现上了解学习PHP，版本为PHP7")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 下载源代码并解压")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/php/php-src/archive/php-7.4.3.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf php-7.4.3.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 创建一个docker环境")]),t._v("\ndocker run -itd --privileged --name php-src -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PWD")]),t._v(":/app  centos:7  /usr/sbin/init\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it php-src /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 构建源码编译环境")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -ex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" yum makecache "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" cmake gcc gcc-c++ autoconf automake libpng-devel libjpeg-devel zlib libxml2-devel ncurses-devel bison libtool-ltdl-devel libiconv libmcrypt mhash mcrypt pcre-devel openssl-devel freetype-devel libcurl-devel nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4. 编译源码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -ex  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /root "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ./configure --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/root --enable-fpm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("p",[t._v("通过以上命令集大致搭建一下所需学习环境，也可以根据需要下载"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_41143631/article/details/83351401",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understand"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://www.sourceinsight.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Source Insight"),a("OutboundLink")],1),t._v("等一些代码辅助分析工具")]),t._v(" "),a("h2",{attrs:{id:"源码整体框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码整体框架"}},[t._v("#")]),t._v(" 源码整体框架")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/program/runtime/program-php-01.png"),alt:"foo"}}),t._v(" "),a("p",[t._v("PHP7核心源码主要围绕")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("ext")]),t._v(" : 官方扩展目录，可以用C/C++定义自己的功能，通过扩展嵌入到PHP中，灵活的扩展能力使得PHP拥有了大量、丰富的第三方组件，这些扩展很好的补充了PHP的功能、特性，使得PHP在web开发中得以大展身手。ext目录下有一个standard扩展，这个扩展提供了大量被大家所熟知的PHP函数：sleep()、usleep()、htmlspecialchars()、md5()、strtoupper()、substr()、array_merge()等等")]),t._v(" "),a("li",[a("strong",[t._v("main")]),t._v(" : 最为核心的文件，实现PHP的基本设施，是SAPI层和Zend层的黏合剂，起到了承上启下的作用，承上，极细SAPI的请求，分析要执行的脚本文件和参数；启下，调用Zend引擎之前，完成必要的初始化等工作")]),t._v(" "),a("li",[a("strong",[t._v("spai")]),t._v(" : 它有标准的输入、输出，而SAPI是PHP的接入层，它接收用户的请求，然后调用PHP内核提供的一些接口完成PHP脚本的执行，所以严格意义上讲SAPI并不算PHP内核的一部分")]),t._v(" "),a("li",[a("strong",[t._v("TSRM")]),t._v(" : 线程安全资源管理器，线程安全机制主要为了保证共享资源的安全，PHP的线程安全机制简洁直观--再多线程环境下，为每个线程提供独立的全局变量副本。具体实施是通过TSRM为每个线程分配（分配钱加锁）一个独立ID（自增）作为当前线程的全局变量内存区索引，在以后的全局变量访问中，实现线程之间的完全独立")]),t._v(" "),a("li",[a("strong",[t._v("Zend")]),t._v(" : Zend 引擎的实现目录。包括词法语法解析，OPCODE，提供语言运行环境\n"),a("ul",[a("li",[t._v("编译器： 负责将PHP代码编译为抽象语法树，然后进一步编译为可执行的opcodes，这个过程相当于GCC的工作，编译器是一个语言实现的基础")]),t._v(" "),a("li",[t._v("执行器： 负责执行编译器输出的opcodes，也就是执行PHP脚本中编写的代码逻辑")])])])]),t._v(" "),a("h2",{attrs:{id:"执行原理概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行原理概述"}},[t._v("#")]),t._v(" 执行原理概述")]),t._v(" "),a("p",[t._v("在PHP7中，源代码首先进行"),a("code",[t._v("词法分析")]),t._v(",将源代码切割为多个字符串但愿，分割后的字符串称为token，而一个一个独立的token是无法表达完整语意的，需要经过语法分析阶段，将token转换为抽象语法树"),a("code",[t._v("AST")]),t._v("，之后，抽象语法树被转换为机器指令执行，在PHP中这些指令称为opcode")]),t._v(" "),a("ol",[a("li",[t._v("词法分析将PHP代码转换为有意义的token，该步骤的词法分析器使用"),a("a",{attrs:{href:"http://re2c.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Re2c"),a("OutboundLink")],1),t._v("实现。")]),t._v(" "),a("li",[t._v("语法分析将Token和符合文法规则的代码生成抽象语法树，语法分析器给予"),a("a",{attrs:{href:"https://www.gnu.org/software/bison/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bison"),a("OutboundLink")],1),t._v("实现。语法分析使用BNF(backus-NaurForm,巴克斯范式)来表法文法规则，Bison借助状态机、状态转移表和压栈、出栈等一系列操作，生成抽象语法树")]),t._v(" "),a("li",[t._v("上不到抽象语法树生成对应的opcode,并被虚拟机执行，指令对应着相应的handler(处理函数)。当虚拟机调用opcode会找到opcode背后的处理函数，执行真正的处理。以常见的echo语句为例，其对应的的opcode便是"),a("a",{attrs:{href:"https://github.com/php/php-src/blob/a66c60cce3cd8878284fb39388080cfb6bac8ff5/Zend/zend_vm_opcodes.h#L215",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZEND_ECHO"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("抽象语法树转换为opcodes,PHP解释执行opcodes")])]),t._v(" "),a("h2",{attrs:{id:"zend-虚拟机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zend-虚拟机"}},[t._v("#")]),t._v(" Zend 虚拟机")]),t._v(" "),a("p",[t._v("编程语言的虚拟机是一种可以运行中间语言的程序，中间语言是抽象出的指令集，由原生语言编译而成，作为虚拟机执行阶段的输入，很多语言都实现了自己的虚拟机，Java、C#和lua，PHP也有自己的虚拟机，称为Zend虚拟机")]),t._v(" "),a("p",[t._v("PHP7完成基本的准备工作后，会启动Zend引擎，加载注册的扩展模块，然后读取独赢的脚本文件，Zend引擎会对文件进行词法和语法分析，生成AST，接着AST被编译成opode，如果开启了opcache，编译的环节会被跳过从opcache中直接读取opcode进行执行，在PHP中，进行词法和语法分析，生成AST，然后编译成opcode及被执行均有Zend虚拟机完成")]),t._v(" "),a("p",[t._v("Zend 虚拟机主要分为解释层，中间数据层和执行层")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/program/runtime/program-php-02.png"),alt:"foo"}}),t._v(" "),a("ol",[a("li",[a("strong",[t._v("解释层")]),t._v("： 这一层主要负责对PHP代码进行语法和语法分析，生成对应的AST；另一个工作就是对AST进行编译，生成符号表和指令集")]),t._v(" "),a("li",[a("strong",[t._v("中间数据层")]),t._v("： 这一层主要包含了虚拟机的核心部分--执行栈道维护、指令集和符号表的存储，而这些事执行引擎调度执行的基础")]),t._v(" "),a("li",[a("strong",[t._v("执行层")]),t._v("：这一层是执行指令集的引擎，负责最终执行并生成记过，这一层实现了大量的底层函数")])]),t._v(" "),a("h3",{attrs:{id:"符号表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号表"}},[t._v("#")]),t._v(" 符号表")]),t._v(" "),a("p",[t._v("符号表是编译程序在编译过程中用来记录源程序中各种名字的特性信息，所以也称为"),a("strong",[t._v("名字特性表")]),t._v("，名字一般包含程序名、过程名、函数名、用户定义类型名、变量名、常量名、枚举值名、标号名等。特性信息指的是名字的种类、类型、维数、参数个数、数值及目标地址等")]),t._v(" "),a("ol",[a("li",[t._v("协助进行语义检查、比如检查一个名字的引用和之前的申明是否相符")]),t._v(" "),a("li",[t._v("协助中间代码生成，最重要的是在目标代码生成阶段，当需要为名字分配地址时。符号表中的信息是地址分配的主要依据")])]),t._v(" "),a("p",[t._v("符号表一般有3种构造和处理方法，分别是线性查找、二叉树hash技术，其中线性查找法是最简单的，按照符号出现的顺序填表，每次查找从第一个位置开始顺序查找。效率表较低；二叉树实现了对半查找。在一定程度上提高了效率；效率最高的方法是通过hash技术实现符号表")]),t._v(" "),a("h3",{attrs:{id:"指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[t._v("#")]),t._v(" 指令")]),t._v(" "),a("p",[t._v("Zend虚拟机的指令称为opline,每条指令对应一个opcode。PHP代码在编译后生成opline，Zend虚拟机根据不同的opline完成PHP代码的执行，opline由操作指令、操作数和返回值组成，与机器指令非常类似")]),t._v(" "),a("h4",{attrs:{id:"opcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opcode"}},[t._v("#")]),t._v(" opcode")]),t._v(" "),a("p",[t._v("opcode有时候被称为所谓的字节码，是被软件解释器解释执行的指令集，这些软件指令集通常会提供一些比对应硬件指令集更高级的数据类型和操作，Zend虚拟机有很多opcode，对应可以做非常多事情，并且随着PHP的发展，opcode也越来越多，意味着PHP可以做越来越多的事情。所有的opcode都在PHP的源代码文件"),a("a",{attrs:{href:"https://github.com/php/php-src/blob/a66c60cce3cd8878284fb39388080cfb6bac8ff5/Zend/zend_vm_opcodes.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zend/zend_vm_opcodes.h"),a("OutboundLink")],1),t._v("种定义")]),t._v(" "),a("h4",{attrs:{id:"操作数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数"}},[t._v("#")]),t._v(" 操作数")]),t._v(" "),a("p",[t._v("op1和op2都是操作数，但不一定全部使用，也就是说，每个opcode对应的handler最多可以使用两个操作数（也可以总使用其中一个，或者都不使用）。每个操作数都可以列结尾函数的参数，返回值result是hanlder函数对操作数op1和op2计算后的结果")]),t._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("p",[t._v("PHP7有多种模式运行，比如常用的CLI模式、FPM模式、以及CGI模式、embed模式、Apache2Handler模式、litespeed模式等")]),t._v(" "),a("h3",{attrs:{id:"sapi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sapi"}},[t._v("#")]),t._v(" SAPI")]),t._v(" "),a("p",[t._v("SAPI（server application programimginterface，服务端应用编程接口）相当于PHP外部环境等代理服务器，CLI和FPM都是基于SAPI的实现，都定义了sapi_module_struct结构")]),t._v(" "),a("h4",{attrs:{id:"cli模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cli模式"}},[t._v("#")]),t._v(" CLI模式")]),t._v(" "),a("p",[t._v("CLI（Command line interface）即命令行借口，该模块主要用于PHP的外壳应用开发，在CLI模式下，PHP的执行过程主要分为5大阶段，这五个阶段分别对应")]),t._v(" "),a("ol",[a("li",[t._v("php_module_startup 模块初始化阶段")]),t._v(" "),a("li",[t._v("php_request_startup 请求初始化阶段")]),t._v(" "),a("li",[t._v("php_execute_script 执行阶段")]),t._v(" "),a("li",[t._v("php_request_shutdown 请求关闭阶段")]),t._v(" "),a("li",[t._v("php_module_shutown 模块关闭阶段")])]),t._v(" "),a("h4",{attrs:{id:"fpm模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fpm模式"}},[t._v("#")]),t._v(" FPM模式")]),t._v(" "),a("p",[t._v("FPM（FastCGI Process Manager）是一个FastCGI进程管理器，提供了更好的PHP进程管理方式，可以有效控制内存和进程，支持平滑重启PHP以及重载PHP配置，与CLI模式一样FPM模式的生命周期也有5个阶段，但是又与CLI模式不同，因为FPM是常驻内存的进程，所以其模块初始化只做一次，便进入循环，而模块关闭在进程退出时也只做一次")]),t._v(" "),a("ol",[a("li",[t._v("php_module_startup 加载所有模块")]),t._v(" "),a("li",[t._v("进入循环，嗲用fcgi_accept_request十几调用的是accept，阻塞等待请求，如果有请求进来，会被唤起，进入php_request_startup，初始化请求。为防止多个进程对accept进行抢占，出现"),a("code",[t._v("惊群")]),t._v("情况，增加了锁机制")]),t._v(" "),a("li",[t._v("进入php_execute_script，对脚本执行编译")]),t._v(" "),a("li",[t._v("调用php_request_shutdown关闭请求，继续进入循环")]),t._v(" "),a("li",[t._v("如果进程退出，调用php_module_shutdown关闭模块")]),t._v(" "),a("li",[t._v("如果请求次数大于max_requests,则跳转5")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("在Linux 2.6内核上，阻塞版本的accept系统调用已经不存在"),a("code",[t._v("惊群")]),t._v("了")])]),t._v(" "),a("p",[t._v("PHPfpm 是多进程的服务，其中一个master进程（管理工作）和多个worker进程（处理数据请求）,一个web请求，nginx会根据服务器的CPU内核数设置worker的进程数，而PHP-FPM的进程有三种设置方式。static、dynamic和ondemand")]),t._v(" "),a("p",[t._v("Client通过HTTP方式请求Nginx,请求由nginx的worker进行处理，专程对应的FastCGI，请求FPM，accept由FPM的worker进程处理，执行完毕再返回给nginx,nginx再一步返回给Client")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("static")]),t._v("：始终会保持一个固定数量的子进程，这个数量由pm.max_children定义")]),t._v(" "),a("li",[a("strong",[t._v("dynamic")]),t._v("：子进程的数量是动态变化，启动时会生成固定数量的子进程，可以理解成最小子进程数，通过pm.start_servers控制，而最大子进程数则由pm.max_children控制，子进程数会在pm.start_servers~pm.max_children范围内变化，另外，闲置的子进程数还可以由pm.min_spare_servers和pm.max_spare_servers两个配置参数控制。欢聚换说，闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过了pm.max_spare_servers,则会被杀掉")]),t._v(" "),a("li",[a("strong",[t._v("ondemand")]),t._v(" ：把内存放在第一位，每个闲置进程在持续闲置了pm.orocess_idle_timeout秒后就会被杀掉，有了这个模式，到了服务器低峰期，内存自然会降下来，如果服务器长时间没有请求，就只会有一个PHP-FPM主进程，当然其弊端是，遇到高峰期或者pm.process_idle_timeout的值太小的话，无法避免服务器频繁创建进程的问题")])]),t._v(" "),a("p",[t._v("Worker创建完成后，对请求的处理工作都会由worker进程进行，而master进程负责对worker进程的监控和管理，比如php-fpm reload和php-fpm stop分别用来重新加载和停止FPM，这部分工作是通过信号机制进行的，比如执行reload命令，对主进程发送了SIGUSR2信号")]),t._v(" "),a("ol",[a("li",[t._v("对于SIGCHLD信号，该信号是由worker推出时发送的，master进程收到这个信号后调用fpm_children_bury函数对worker进程进行善后，同时调用fpm_children_make函数按照不同模式启动worker进程")]),t._v(" "),a("li",[t._v("对于SIGUSR1信号，调用的是fpm_log_open函数，重新打开日志文件，然后fpm_pctl_kill_all杀掉worker进程，这时候又会收到SIGCHILD，进行步骤1")]),t._v(" "),a("li",[t._v("对于SIGINT、SIGTERM、SIGQUIT和SIGUSR2信号，调用的都是fpm_pctl函数，该函数有两个参数，一个表示状态值。一个表示操作类型")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("在大流量请求的情况下，切分日志时，会向php-fpm发送SIGUSR1信号，此时会有批量的worker进程被杀死，在重启完毕前，worker的进程数会瞬间变少，这时候会出现请求响应变慢的请求")])]),t._v(" "),a("h4",{attrs:{id:"cgi模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgi模式"}},[t._v("#")]),t._v(" CGI模式")]),t._v(" "),a("p",[t._v("CGI（Common Gateway Interface）即通用网关接口，通俗的讲CGI就是将web服务器和PHP执行程序连接起来，把接受的指令传递给PHP执行，在把PHP执行的结果返回给WEB服务器")]),t._v(" "),a("p",[t._v("对于每一个用户请求，都会先创建CGI的子进程，然后处理请求，处理完成后结束这个子进程，这就是fork-and-execute模式，用户请求数量非常多会大量挤占系统的资源（内存、CPU时间等），造成效率低下，所以对于采用CGI模式的服务器，有多少连接请求，就会有多少CGI子进程，子进程反复加载也是导致CGI性能低下的原因，这也是FastCGI出现的原理")]),t._v(" "),a("h4",{attrs:{id:"embed-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#embed-模式"}},[t._v("#")]),t._v(" Embed 模式")]),t._v(" "),a("p",[t._v("PHP提供了一个Embed SAPI，也就是说，PHP允许在C/C++语言种调用PHP/ZE提供的函数，编译时增加--enable-embed生成，该模块对外提供了两个API，即php_embed_init和php_embed_shutdown，php_embed_ini用于完成模块初始化和请求初始化，php_embed_shutdown用于完成请求关闭和模块关闭工作")]),t._v(" "),a("h4",{attrs:{id:"phpdbfg模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#phpdbfg模式"}},[t._v("#")]),t._v(" PHPDBFG模式")]),t._v(" "),a("p",[t._v("PHPDBG是一个PHP的SAPI模块，可以在不修改代码和不影响性能的情况下控制PHP的运行环境，PHPDBG的目标是成为一个轻量级，强大，易用的PHP调试平台，从PHP5.6开始集成")]),t._v(" "),a("p",[t._v("PHPDBG提供了类似GDB的功能，支持单步调试，可以灵活的打断点，可以查看类方法、函数、文件的行、内存地址、opcode等，可直接调用PHP的eval，另外还支持远程debug")]),t._v(" "),a("div",{staticClass:"language-phpdbg extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("prompt> exec ./test.php\nprompt> b func#2\nprompt> r\nprompt> info break\n")])])]),a("h2",{attrs:{id:"内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),a("p",[t._v("zend针对内存的操作封装了一层，用于替换直接的内存操作：malloc、free等，实现了更高效率的内存利用，其实现主要参考了tcmalloc的设计。")]),t._v(" "),a("p",[t._v("源码中emalloc、efree、estrdup等等就是内存池的操作。")]),t._v(" "),a("p",[t._v("内存池是内核中最底层的内存操作，定义了三种粒度的内存块：chunk、page、slot，每个chunk的大小为2M，page大小为4KB，一个chunk被切割为512个page，而一个或若干个page被切割为多个slot，所以申请内存时按照不同的申请大小决定具体的分配策略：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Huge(chunk)")]),t._v(": 申请内存大于2M，直接调用系统分配，分配若干个chunk")]),t._v(" "),a("li",[a("strong",[t._v("Large(page)")]),t._v(": 申请内存大于3092B(3/4 page_size)，小于2044KB(511 page_size)，分配若干个page")]),t._v(" "),a("li",[a("strong",[t._v("Small(slot)")]),t._v(": 申请内存小于等于3092B(3/4 page_size)，内存池提前定义好了30种同等大小的内存(8,16,24,32，...3072)，他们分配在不同的page上(不同大小的内存可能会分配在多个连续的page)，申请内存时直接在对应page上查找可用位置")])]),t._v(" "),a("h2",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[t._v("为了解决循环引用问题，PHP引入了垃圾回收机制，PHP7垃圾回收的实现主要包括"),a("code",[t._v("zend_gc.h")]),t._v("和"),a("code",[t._v("zend_gc.c")]),t._v("中")]),t._v(" "),a("h3",{attrs:{id:"垃圾的产生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾的产生"}},[t._v("#")]),t._v(" 垃圾的产生")]),t._v(" "),a("p",[t._v("前面已经介绍过PHP变量的内存管理，即引用计数机制，当变量赋值、传递时并不会直接硬拷贝，而是增加value的引用数，unset、return等释放变量时再减掉引用数，减掉后如果发现refcount变为0则直接释放value，这是变量的基本gc过程，PHP正是通过这个机制实现的自动垃圾回收，但是有一种情况是这个机制无法解决的，从而因变量无法回收导致内存始终得不到释放，这种情况就是循环引用，简单的描述就是变量的内部成员引用了变量自身，比如数组中的某个元素指向了数组，这样数组的引用计数中就有一个来自自身成员，试图释放数组时因为其refcount仍然大于0而得不到释放，而实际上已经没有任何外部引用了，这种变量不可能再被使用，所以PHP引入了另外一个机制用来处理变量循环引用的问题。")]),t._v(" "),a("p",[t._v("下面看一个数组循环引用的例子：")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("unset($a)")]),t._v("之前引用关系")]),t._v(" "),a("p",[t._v("可以看到，unset($a)之后由于数组中有子元素指向$a，所以refcount = 1，此时是无法通过正常的gc机制回收的，但是$a已经已经没有任何外部引用了，所以这种变量就是垃圾，垃圾回收器要处理的就是这种情况，这里明确两个准则：")]),t._v(" "),a("ol",[a("li",[t._v("如果一个变量value的refcount减少到0， 那么此value可以被释放掉，不属于垃圾")]),t._v(" "),a("li",[t._v("如果一个变量value的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾")])]),t._v(" "),a("p",[t._v("针对第一个情况GC不会处理，只有第二种情况GC才会将变量收集起来。另外变量是否加入垃圾检查buffer并不是根据zval的类型判断的，而是与前面介绍的是否用到引用计数一样通过zval.u1.type_flag记录的，只有包含IS_TYPE_COLLECTABLE的变量才会被GC收集。")]),t._v(" "),a("p",[t._v("目前垃圾只会出现在array、object两种类型中，数组的情况上面已经介绍了，object的情况则是成员属性引用对象本身导致的，其它类型不会出现这种变量中的成员引用变量自身的情况，所以垃圾回收只会处理这两种类型的变量。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" IS_TYPE_COLLECTABLE")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     type       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" collectable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("simple types    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("string          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("interned string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("array           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("      Y      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("immutable array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("object          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("      Y      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("resource        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("reference       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n")])])]),a("h3",{attrs:{id:"回收过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收过程"}},[t._v("#")]),t._v(" 回收过程")]),t._v(" "),a("p",[t._v("如果当变量的refcount减少后大于0，PHP并不会立即进行对这个变量进行垃圾鉴定，而是放入一个缓冲buffer中，等这个buffer满了以后(10000个值)再统一进行处理，加入buffer的是变量zend_value的zend_refcounted_h:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_refcounted_h")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    uint32_t         refcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录zend_value的引用数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            zend_uchar    type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//zend_value的类型,与zval.u1.type一致")]),t._v("\n            zend_uchar    flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            uint16_t      gc_info "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//GC信息，垃圾回收的过程会用到")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        uint32_t type_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zend_refcounted_h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("一个变量只能加入一次buffer，为了防止重复加入，变量加入后会把zend_refcounted_h.gc_info置为GC_PURPLE，即标为紫色，下次refcount减少时如果发现已经加入过了则不再重复插入。垃圾缓存区是一个双向链表，等到缓存区满了以后则启动垃圾检查过程：遍历缓存区，再对当前变量的所有成员进行遍历，然后把成员的refcount减1(如果成员还包含子成员则也进行递归遍历，其实就是深度优先的遍历)，最后再检查当前变量的引用，如果减为了0则为垃圾。这个算法的原理很简单，垃圾是由于成员引用自身导致的，那么就对所有的成员减一遍引用，结果如果发现变量本身refcount变为了0则就表明其引用全部来自自身成员。具体的过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("从buffer链表的roots开始遍历，把当前value标为灰色(zend_refcounted_h.gc_info置为GC_GREY)，然后对当前value的成员进行深度优先遍历，把成员value的refcount减1，并且也标为灰色；")]),t._v(" "),a("li",[t._v("重复遍历buffer链表，检查当前value引用是否为0，为0则表示确实是垃圾，把它标为白色(GC_WHITE)，如果不为0则排除了引用全部来自自身成员的可能，表示还有外部的引用，并不是垃圾，这时候因为步骤(1)对成员进行了refcount减1操作，需要再还原回去，对所有成员进行深度遍历，把成员refcount加1，同时标为黑色；")]),t._v(" "),a("li",[t._v("再次遍历buffer链表，将非GC_WHITE的节点从roots链表中删除，最终roots链表中全部为真正的垃圾，最后将这些垃圾清除。")])]),t._v(" "),a("h3",{attrs:{id:"垃圾收集的内部实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集的内部实现"}},[t._v("#")]),t._v(" 垃圾收集的内部实现")]),t._v(" "),a("p",[t._v("接下来我们简单看下垃圾回收的内部实现，垃圾收集器的全局数据结构：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_gc_globals")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    zend_bool         gc_enabled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否启用gc")]),t._v("\n    zend_bool         gc_active"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否在垃圾检查过程中")]),t._v("\n    zend_bool         gc_full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//缓存区是否已满")]),t._v("\n\n    gc_root_buffer   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//启动时分配的用于保存可能垃圾的缓存区")]),t._v("\n    gc_root_buffer    roots"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向buf中最新加入的一个可能垃圾")]),t._v("\n    gc_root_buffer   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向buf中没有使用的buffer")]),t._v("\n    gc_root_buffer   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("first_unused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向buf中第一个没有使用的buffer")]),t._v("\n    gc_root_buffer   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("last_unused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向buf尾部")]),t._v("\n\n    gc_root_buffer    to_free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//待释放的垃圾")]),t._v("\n    gc_root_buffer   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next_to_free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    uint32_t gc_runs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//统计gc运行次数")]),t._v("\n    uint32_t collected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//统计已回收的垃圾数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zend_gc_globals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_gc_root_buffer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    zend_refcounted          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每个zend_value的gc信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_gc_root_buffer")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_gc_root_buffer")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint32_t                 refcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" gc_root_buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("zend_gc_globals是垃圾回收过程中主要用到的一个结构，用来保存垃圾回收器的所有信息，比如垃圾缓存区；gc_root_buffer用来保存每个可能是垃圾的变量，它实际就是整个垃圾收集buffer链表的元素，当GC收集一个变量时会创建一个gc_root_buffer，插入链表。")]),t._v(" "),a("p",[t._v("zend_gc_globals这个结构中有几个关键成员：")]),t._v(" "),a("ol",[a("li",[t._v("buf: 前面已经说过，当refcount减少后如果大于0那么就会将这个变量的value加入GC的垃圾缓存区，buf就是这个缓存区，它实际是一块连续的内存，在GC初始化时一次性分配了10001个gc_root_buffer，插入变量时直接从buf中取出可用节点；")]),t._v(" "),a("li",[t._v("roots: 垃圾缓存链表的头部，启动GC检查的过程就是从roots开始遍历的；")]),t._v(" "),a("li",[t._v("first_unused: 指向buf中第一个可用的节点，初始化时这个值为1而不是0，因为第一个gc_root_buffer保留没有使用，有元素插入roots时如果first_unused还没有到达buf的尾部则返回first_unused给最新的元素，然后first_unused++，直到last_unused，比如现在已经加入了2个可能的垃圾变量，则对应的结构：")]),t._v(" "),a("li",[t._v("last_unused: 与first_unused类似，指向buf末尾")]),t._v(" "),a("li",[t._v("unused: GC收集变量时会依次从buf中获取可用的gc_root_buffer，这种情况直接取first_unused即可，但是有些变量加入垃圾缓存区之后其refcount又减为0了，这种情况就需要从roots中删掉，因为它不可能是垃圾，这样就导致roots链表并不是像buf分配的那样是连续的，中间会出现一些开始加入后面又删除的节点，这些节点就通过unused串成一个单链表，unused指向链表尾部，下次有新的变量插入roots时优先使用unused的这些节点，其次才是first_unused的，举个例子")])]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//示例1：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//$a ->  zend_array(refcount=1)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//$a ->  zend_array(refcount=2)")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//$b ->")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时zend_array(refcount=1)，因为refoucnt>0所以加入gc的垃圾缓存区：roots")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时zend_array(refcount=0)且gc_info为GC_PURPLE，则从roots链表中删掉")]),t._v("\n")])])]),a("h2",{attrs:{id:"扩展的构成及编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展的构成及编译"}},[t._v("#")]),t._v(" 扩展的构成及编译")]),t._v(" "),a("h3",{attrs:{id:"扩展的构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展的构成"}},[t._v("#")]),t._v(" 扩展的构成")]),t._v(" "),a("p",[t._v("扩展首先需要创建一个"),a("code",[t._v("zend_module_entry")]),t._v("结构，这个变量必须是全局变量，且变量名必须是："),a("code",[t._v("扩展名称_module_entry")]),t._v("，内核通过这个结构得到这个扩展都提供了哪些功能，换句话说，一个扩展可以只包含一个"),a("code",[t._v("zend_module_entry")]),t._v("结构，相当于定义了一个什么功能都没有的扩展。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//zend_modules.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_module_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//sizeof(zend_module_entry)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" zend_api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ZEND_MODULE_API_NO")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" zend_debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否开启debug")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" zts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否开启线程安全")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_ini_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ini_entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_module_dep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展名称，不能重复")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_zend_function_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("functions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展提供的内部函数列表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("module_startup_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INIT_FUNC_ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展初始化回调函数，PHP_MINIT_FUNCTION或ZEND_MINIT_FUNCTION定义的函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("module_shutdown_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SHUTDOWN_FUNC_ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展关闭时回调函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("request_startup_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INIT_FUNC_ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//请求开始前回调函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("request_shutdown_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SHUTDOWN_FUNC_ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//请求结束时回调函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("info_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ZEND_MODULE_INFO_FUNC_ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//php_info展示的扩展信息处理函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//版本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" module_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展的唯一编号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("build_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这个结构包含很多成员，但并不是所有的都需要自己定义，经常用到的主要有下面几个：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("name:")]),t._v(" 扩展名称，不能重复")]),t._v(" "),a("li",[a("strong",[t._v("functions:")]),t._v(" 扩展定义的内部函数entry")]),t._v(" "),a("li",[a("strong",[t._v("module_startup_func:")]),t._v(" PHP在模块初始化时回调的hook函数，可以使扩展介入module startup阶段")]),t._v(" "),a("li",[a("strong",[t._v("module_shutdown_func:")]),t._v(" 在模块关闭阶段回调的函数")]),t._v(" "),a("li",[a("strong",[t._v("request_startup_func:")]),t._v(" 在请求初始化阶段回调的函数")]),t._v(" "),a("li",[a("strong",[t._v("request_shutdown_func:")]),t._v(" 在请求结束阶段回调的函数")]),t._v(" "),a("li",[a("strong",[t._v("info_func:")]),t._v(" php_info()函数时调用，用于展示一些配置、运行信息")]),t._v(" "),a("li",[a("strong",[t._v("version:")]),t._v(" 扩展版本")])]),t._v(" "),a("p",[t._v("除了上面这些需要手动设置的成员，其它部分可以通过"),a("code",[t._v("STANDARD_MODULE_HEADER")]),t._v("、"),a("code",[t._v("STANDARD_MODULE_PROPERTIES")]),t._v("宏统一设置，扩展提供的内部函数及四个执行阶段的钩子函数是扩展最常用到的部分，几乎所有的扩展都是基于这两部分实现的。有了这个结构还需要提供一个接口来获取这个结构变量，这个接口是统一的，扩展中通过"),a("code",[t._v("ZEND_GET_MODULE(extension_name)")]),t._v("完成这个接口的定义:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//zend_API.h\n#define ZEND_GET_MODULE(name) \\\n    BEGIN_EXTERN_C()\\\n    ZEND_DLEXPORT zend_module_entry *get_module(void) { return &name##_module_entry; }\\\n    END_EXTERN_C()\n")])])]),a("p",[t._v("展开后可以看到，实际就是定义了一个get_module()函数，返回扩展zend_module_entry结构的地址，这就是为什么这个结构的变量名必须是"),a("code",[t._v("扩展名称_module_entry")]),t._v("这种格式的原因。")]),t._v(" "),a("p",[t._v("有了扩展的zend_module_entry结构以及获取这个结构的接口一个合格的扩展就编写完成了，只是这个扩展目前还什么都干不了：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"php.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"php_ini.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ext/standard/info.h"')])]),t._v("\n\nzend_module_entry mytest_module_entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    STANDARD_MODULE_HEADER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mytest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//mytest_functions,")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP_MINIT(mytest),")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP_MSHUTDOWN(mytest),")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP_RINIT(mytest),")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP_RSHUTDOWN(mytest),")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP_MINFO(mytest),")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    STANDARD_MODULE_PROPERTIES\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ZEND_GET_MODULE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("编译、安装后执行"),a("code",[t._v("php -m")]),t._v("就可以看到my_test这个扩展了。")]),t._v(" "),a("h3",{attrs:{id:"编译工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译工具"}},[t._v("#")]),t._v(" 编译工具")]),t._v(" "),a("p",[t._v("PHP提供了几个脚本工具用于简化扩展的实现：ext_skel、phpize、php-config，后面两个脚本主要配合autoconf、automake生成Makefile。在介绍这几个工具之前，我们先看下PHP安装后的目录结构，因为很多脚本、配置都放置在安装后的目录中，比如PHP的安装路径为：/usr/local/php7，则此目录的主要结构：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php7\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bin "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//php编译生成的二进制程序目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cli模式的php")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("phpize      \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("etc     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一些sapi的配置    ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("include "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//php源码的头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("main    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP中的头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Zend    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Zend头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("TSRM    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TSRM头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ext     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sapi    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//SAPI头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("include\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("lib "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//依赖的so库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("extensions  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展so保存目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("build       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译时的工具、m4配置等，编写扩展是会用到")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("acinclude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m4    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP自定义的autoconf宏")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("libtool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m4      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//libtool定义的autoconf宏，acinclude.m4、libtool.m4会被合成aclocal.m4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("phpize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m4       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//PHP核心configure.in配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sbin "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//SAPI编译生成的二进制程序，php-fpm会放在这")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("var  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//log、run日志")]),t._v("\n")])])]),a("h4",{attrs:{id:"ext-skel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ext-skel"}},[t._v("#")]),t._v(" ext_skel")]),t._v(" "),a("p",[t._v("这个脚本位于PHP源码/ext目录下，它的作用是用来生成扩展的基本骨架，帮助开发者快速生成一个规范的扩展结构，可以通过以下命令生成一个扩展结构：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ext_skel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("extname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("扩展名称\n")])])]),a("p",[t._v("执行完以后会在ext目录下新生成一个扩展目录，比如extname是mytest，则将生成以下文件：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mytest \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m4     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//autoconf规则的编译配置文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w32    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//windows环境的配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("CREDITS\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("EXPERIMENTAL\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("include       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//依赖库的include头文件，可以不用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展源码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("php_mytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//头文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("php    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用于在PHP中测试扩展是否可用，可以不用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("tests         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//测试用例，执行make test时将执行、验证这些用例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("001.")]),t._v("phpt\n")])])]),a("p",[t._v("这个脚本主要生成了编译需要的配置以及扩展的基本结构，初步生成的这个扩展可以成功的编译、安装、使用，实际开发中我们可以使用这个脚本生成一个基本结构，然后根据具体的需要逐步完善。")]),t._v(" "),a("h3",{attrs:{id:"php-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-config"}},[t._v("#")]),t._v(" php-config")]),t._v(" "),a("p",[t._v("这个脚本为PHP源码中的/script/php-config.in，PHP安装后被移到安装路径的/bin目录下，并重命名为php-config，这个脚本主要是获取PHP的安装信息的，主要有：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("PHP安装路径")])]),t._v(" "),a("li",[a("strong",[t._v("PHP版本")])]),t._v(" "),a("li",[a("strong",[t._v("PHP源码的头文件目录：")]),t._v(" main、Zend、ext、TSRM中的头文件，编写扩展时会用到这些头文件，这些头文件保存在PHP安装位置/include/php目录下")]),t._v(" "),a("li",[a("strong",[t._v("LDFLAGS：")]),t._v(" 外部库路径，比如："),a("code",[t._v("-L/usr/bib -L/usr/local/lib")])]),t._v(" "),a("li",[a("strong",[t._v("依赖的外部库：")]),t._v(" 告诉编译器要链接哪些文件，"),a("code",[t._v("-lcrypt -lresolv -lcrypt")]),t._v("等等")]),t._v(" "),a("li",[a("strong",[t._v("扩展存放目录：")]),t._v(" 扩展.so保存位置，安装扩展make install时将安装到此路径下")]),t._v(" "),a("li",[a("strong",[t._v("编译的SAPI：")]),t._v(" 如cli、fpm、cgi等")]),t._v(" "),a("li",[a("strong",[t._v("PHP编译参数：")]),t._v(" 执行./configure时带的参数")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("这个脚本在编译扩展时会用到，执行"),a("code",[t._v("./configure --with-php-config=xxx")]),t._v("生成Makefile时作为参数传入即可，它的作用是提供给configure.in获取上面几个配置，生成Makefile。")]),t._v(" "),a("h4",{attrs:{id:"phpize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#phpize"}},[t._v("#")]),t._v(" phpize")]),t._v(" "),a("p",[t._v("这个脚本主要是操作复杂的autoconf/automake/autoheader/autolocal等系列命令，用于生成configure文件，GNU auto系列的工具众多，这里简单介绍下基本的使用：")]),t._v(" "),a("p",[a("strong",[t._v("(1)autoscan：")]),t._v(" 在源码目录下扫描，生成configure.scan，然后把这个文件重名为为configure.in，可以在这个文件里对依赖的文件、库进行检查以及配置一些编译参数等。")]),t._v(" "),a("p",[a("strong",[t._v("(2)aclocal：")]),t._v(" automake中有很多宏可以在configure.in或其它.m4配置中使用，这些宏必须定义在aclocal.m4中，否则将无法被autoconf识别，aclocal可以根据configure.in自动生成aclocal.m4，另外，autoconf提供的特性不可能满足所有的需求，所以autoconf还支持自定义宏，用户可以在acinclude.m4中定义自己的宏，然后在执行aclocal生成aclocal.m4时也会将acinclude.m4加载进去。")]),t._v(" "),a("p",[a("strong",[t._v("(3)autoheader：")]),t._v(' 它可以根据configure.in、aclocal.m4生成一个C语言"define"声明的头文件模板(config.h.in)供configure执行时使用，比如很多程序会通过configure提供一些enable/disable的参数，然后根据不同的参数决定是否开启某些选项，这种就可以根据编译参数的值生成一个define宏，比如：'),a("code",[t._v("--enabled-xxx")]),t._v("生成"),a("code",[t._v("#define ENABLED_XXX 1")]),t._v("，否则默认生成"),a("code",[t._v("#define ENABLED_XXX 0")]),t._v("，代码里直接使用这个宏即可。比如configure.in文件内容如下：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("AC_PREREQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.63")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAC_INIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FULL-PACKAGE-NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("VERSION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BUG-REPORT-ADDRESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nAC_CONFIG_HEADERS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("config.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nAC_ARG_ENABLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xxx, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--enable-xxx if enable xxx"')]),t._v(","),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    AC_DEFINE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ENABLED_XXX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("enabled xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    AC_DEFINE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ENABLED_XXX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("disabled xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nAC_OUTPUT\n")])])]),a("p",[t._v("执行autoheader后将生成一个config.h.in的文件，里面包含"),a("code",[t._v("#undef ENABLED_XXX")]),t._v("，最终执行"),a("code",[t._v("./configure --enable-xxx")]),t._v("后将生成一个config.h文件，包含"),a("code",[t._v("#define ENABLED_XXX 1")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("(4)autoconf：")]),t._v(" 将configure.in中的宏展开生成configure、config.h，此过程会用到aclocal.m4中定义的宏。")]),t._v(" "),a("p",[a("strong",[t._v("(5)automake：")]),t._v(" 将Makefile.am中定义的结构建立Makefile.in，然后configure脚本将生成的Makefile.in文件转换为Makefile。")]),t._v(" "),a("p",[t._v("编写PHP扩展时并不需要操作上面全部的步骤，PHP提供了两个编辑好的配置：configure.in、acinclude.m4，这两个配置是从PHP安装路径/lib/php/build目录下的phpize.m4、acinclude.m4复制生成的，其中configure.in中定义了一些PHP内核相关的配置检查项，另外这个文件会include每个扩展各自的配置:config.m4，所以编写扩展时我们只需要在config.m4中定义扩展自己的配置就可以了，不需要关心依赖的PHP内核相关的配置，在扩展所在目录下执行phpize就可以生成扩展的configure、config.h文件了。")]),t._v(" "),a("p",[t._v("configure.in(phpize.m4)：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("AC_PREREQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.59")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAC_INIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config.m4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#--with-php-config参数")]),t._v("\nPHP_ARG_WITH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("php-config,,\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("  --with-php-config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("  Path to php-config "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("php-config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", php-config, no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PHP_CONFIG")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PHP_PHP_CONFIG")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#加载扩展配置")]),t._v("\nsinclude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config.m4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nAC_CONFIG_HEADER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nAC_OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("phpize中的主要操作：")])]),t._v(" "),a("p",[a("strong",[t._v("(1)phpize_check_configm4:")]),t._v(" 检查扩展的config.m4是否存在。")]),t._v(" "),a("p",[a("strong",[t._v("(2)phpize_check_build_files:")]),t._v(" 检查php安装路径下的lib/php/build/，这个目录下包含PHP自定义的autoconf宏文件acinclude.m4以及libtool；检查扩展所在目录。")]),t._v(" "),a("p",[a("strong",[t._v("(3)phpize_print_api_numbers:")]),t._v(" 输出PHP Api Version、Zend Module Api No、Zend Extension Api No信息。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("phpize_get_api_numbers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# extracting API NOs:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PHP_API_VERSION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#define PHP_API_VERSION'")]),t._v(" $includedir/main/php.h"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("$SED "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/#define PHP_API_VERSION//'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ZEND_MODULE_API_NO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#define ZEND_MODULE_API_NO'")]),t._v(" $includedir/Zend/zend_modules.h"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("$SED "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/#define ZEND_MODULE_API_NO//'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ZEND_EXTENSION_API_NO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#define ZEND_EXTENSION_API_NO'")]),t._v(" $includedir/Zend/zend_extensions.h"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("$SED "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/#define ZEND_EXTENSION_API_NO//'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(4)phpize_copy_files:")]),t._v(" 将PHP安装位置/lib/php/build目录下的mkdep.awk scan_makefile_in.awk shtool libtool.m4四个文件拷到扩展的build目录下，然后将acinclude.m4 Makefile.global config.sub config.guess ltmain.sh run-tests*.php文件拷到扩展根目录，最后将acinclude.m4、build/libtool.m4合并到扩展目录下的aclocal.m4文件中。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("phpize_copy_files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" -d build "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" build\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$phpdir")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$FILES_BUILD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$builddir")]),t._v('"')]),t._v("/build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$phpdir")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$FILES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$builddir")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#acinclude.m4、libtool.m4合并到aclocal.m4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$builddir")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" acinclude.m4 ./build/libtool.m4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aclocal.m4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(5)phpize_replace_prefix:")]),t._v(" 将PHP安装位置/lib/php/build/phpize.m4拷贝到扩展目录下，将文件中的prefix替换为PHP安装路径，然后重命名为configure.in。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("phpize_replace_prefix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  -e "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s#/usr/local/php7#'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$prefix")]),t._v('#"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$phpdir")]),t._v('/phpize.m4"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" configure.in\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(6)phpize_check_shtool:")]),t._v(" 检查/build/shtool。")]),t._v(" "),a("p",[a("strong",[t._v("(7)phpize_check_autotools:")]),t._v(" 检查autoconf、autoheader。")]),t._v(" "),a("p",[a("strong",[t._v("(8)phpize_autotools")]),t._v(" 执行autoconf生成configure，然后再执行autoheader生成config.h。")]),t._v(" "),a("h3",{attrs:{id:"编写扩展的基本步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写扩展的基本步骤"}},[t._v("#")]),t._v(" 编写扩展的基本步骤")]),t._v(" "),a("p",[t._v("编写一个PHP扩展主要分为以下几步：")]),t._v(" "),a("ul",[a("li",[t._v("通过ext目录下ext_skel脚本生成扩展的基本框架："),a("code",[t._v("./ext_skel --extname")]),t._v("；")]),t._v(" "),a("li",[t._v("修改config.m4配置：设置编译配置参数、设置扩展的源文件、依赖库/函数检查等等；")]),t._v(" "),a("li",[t._v("编写扩展要实现的功能：按照PHP扩展的格式以及PHP提供的API编写功能；")]),t._v(" "),a("li",[t._v("生成configure：扩展编写完成后执行phpize脚本生成configure及其它配置文件；")]),t._v(" "),a("li",[t._v("编译&安装：./configure、make、make install，然后将扩展的.so路径添加到php.ini中。")])]),t._v(" "),a("p",[t._v("最后就可以在PHP中使用这个扩展了。")]),t._v(" "),a("h3",{attrs:{id:"config-m4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-m4"}},[t._v("#")]),t._v(" config.m4")]),t._v(" "),a("p",[t._v("config.m4是扩展的编译配置文件，它被include到configure.in文件中，最终被autoconf编译为configure，编写扩展时我们只需要在config.m4中修改配置即可，一个简单的扩展配置只需要包含以下内容：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PHP_ARG_WITH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("扩展名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" mytest support"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nMake sure that the comment is aligned"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("with"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("扩展名称             Include xxx support"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$PHP_扩展名称"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" then\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PHP_NEW_EXTENSION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("扩展名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 源码文件列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $ext_shared"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("DZEND_ENABLE_STATIC_TSRMLS_CACHE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfi\n")])])]),a("p",[t._v("PHP在acinclude.m4中基于autoconf/automake的宏封装了很多可以直接使用的宏，下面介绍几个比较常用的宏：")]),t._v(" "),a("p",[a("strong",[t._v("(1)PHP_ARG_WITH(arg_name,check message,help info):")]),t._v(" 定义一个"),a("code",[t._v("--with-feature[=arg]")]),t._v('这样的编译参数，调用的是autoconf的AC_ARG_WITH，这个宏有5个参数，常用的是前三个，分别表示：参数名、执行./configure是展示信息、执行--help时展示信息，第4个参数为默认值，如果不定义默认为"no"，通过这个宏定义的参数可以在config.m4中通过'),a("code",[t._v("$PHP_参数名(大写)")]),t._v("访问，比如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("PHP_ARG_WITH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aaa, aaa-configure, "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" aa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#后面通过$PHP_AAA就可以读取到--with-aaa=xxx设置的值了")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(2)PHP_ARG_ENABLE(arg_name,check message,help info):")]),t._v(" 定义一个"),a("code",[t._v("--enable-feature[=arg]")]),t._v("或"),a("code",[t._v("--disable-feature")]),t._v("参数，"),a("code",[t._v("--disable-feature")]),t._v("等价于"),a("code",[t._v("--enable-feature=no")]),t._v("，这个宏与PHP_ARG_WITH类似，通常情况下如果配置的参数需要额外的arg值会使用PHP_ARG_WITH，而如果不需要arg值，只用于开关配置则会使用PHP_ARG_ENABLE。")]),t._v(" "),a("p",[a("strong",[t._v("(3)AC_MSG_CHECKING()/AC_MSG_RESULT()/AC_MSG_ERROR():")]),t._v(" ./configure时输出结果，其中error将会中断configure执行。")]),t._v(" "),a("p",[a("strong",[t._v("(4)AC_DEFINE(variable, value, [description]):")]),t._v(" 定义一个宏，比如："),a("code",[t._v("AC_DEFINE(IS_DEBUG, 1, [])")]),t._v("，执行autoheader时将在头文件中生成："),a("code",[t._v("#define IS_DEBUG 1")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("(5)PHP_ADD_INCLUDE(path):")]),t._v(" 添加include路径，即："),a("code",[t._v("gcc -Iinclude_dir")]),t._v("，"),a("code",[t._v('#include "file";')]),t._v("将先在通过-I指定的目录下查找，扩展引用了外部库或者扩展下分了多个目录的情况下会用到这个宏。")]),t._v(" "),a("p",[a("strong",[t._v("(6)PHP_CHECK_LIBRARY(library, function [, action-found [, action-not-found [, extra-libs]]]):")]),t._v(" 检查依赖的库中是否存在需要的function，action-found为存在时执行的动作，action-not-found为不存在时执行的动作，比如扩展里使用到线程pthread，检查pthread_create()，如果没找到则终止./configure执行：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("PHP_CHECK_LIBRARY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pthread, pthread_create, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    AC_MSG_ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("not "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" pthread_create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" lib pthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(7)AC_CHECK_FUNC(function, [action-if-found], [action-if-not-found]):")]),t._v(" 检查函数是否存在。\n"),a("strong",[t._v("(8)PHP_ADD_LIBRARY_WITH_PATH($LIBNAME, $XXX_DIR/$PHP_LIBDIR, XXX_SHARED_LIBADD):")]),t._v(" 添加链接库。")]),t._v(" "),a("p",[a("strong",[t._v("(9)PHP_NEW_EXTENSION(extname, sources [, shared [, sapi_class [, extra-cflags [, cxx [, zend_ext]]]]]):")]),t._v(" 注册一个扩展，添加扩展源文件，确定此扩展是动态库还是静态库，每个扩展的config.m4中都需要通过这个宏完成扩展的编译配置。")]),t._v(" "),a("p",[t._v("更多autoconf及PHP封装的宏大家可以在用到的时候再自行检索，同时ext目录下有大量的示例可供参考。")])])}),[],!1,null,null,null);s.default=e.exports}}]);